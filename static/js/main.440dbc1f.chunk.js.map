{"version":3,"sources":["Components/LoginForm.js","Pages/LoginPage.js","Components/RegisterForm.js","Pages/RegisterPage.js","Pages/HomePage.js","Pages/EmailVerificationPage.js","Pages/NotFoundPage.js","Pages/LogoutPage.js","App.js","index.js"],"names":["LoginForm","validationSchema","yup","email","required","password","useState","show","setShow","handleClick","history","useHistory","toast","useToast","status","title","description","duration","message","setMessage","useEffect","isClosable","onSubmit","values","actions","a","axios","post","response","data","accessToken","refreshToken","localStorage","set","replace","setSubmitting","error","height","alignItems","background","justifyContent","direction","p","rounded","shadow","mb","initialValues","props","name","field","form","isInvalid","errors","touched","htmlFor","placeholder","id","variant","type","size","pr","width","h","onClick","mt","colorScheme","isLoading","isSubmitting","as","ReachLink","color","to","LoginPage","RegisterForm","min","max","matches","RegisterPage","HomePage","requestLogin","get","headers","refreshTokens","remove","refToken","EmailVerificationPage","emailVerificationToken","useParams","setStatus","then","catch","NotFoundPage","LogoutPage","histroy","logout","delete","App","className","exact","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.440dbc1f.chunk.js","sourcesContent":["import { Button } from '@chakra-ui/button'\nimport { FormControl } from '@chakra-ui/form-control'\nimport { FormErrorMessage, FormLabel } from '@chakra-ui/form-control'\nimport { Input, InputGroup, InputRightElement } from '@chakra-ui/input'\nimport { Link } from '@chakra-ui/layout'\nimport { Flex, Heading, Text } from '@chakra-ui/layout'\nimport { Field, Form, Formik } from 'formik'\nimport React, { useEffect, useState } from 'react'\nimport { Link as ReachLink, useHistory} from 'react-router-dom'\nimport * as yup from 'yup';\nimport axios from 'axios';\nimport { useToast } from '@chakra-ui/toast'\nimport localStorage from 'local-storage';\n\nfunction LoginForm() {\n\n    const initialValues = {\n        email:'',\n        password:''\n    }\n    \n        const validationSchema = yup.object({\n          email: yup\n          .string()\n          .email()\n          .required(\"Email is a required field\"),\n        password: yup\n          .string()\n          .required(\"Please enter your password\")\n      })\n\n      const [show, setShow] = useState(false)\n      const handleClick = () => setShow(!show)\n      const history = useHistory();\n      const toast = useToast();\n\n      const [message, setMessage] = useState({\n        status:\"info\",\n        title: \"Enter valid credentials\",\n        description:\"enter valid email address and password\",\n        duration:3000\n      })\n\n      useEffect(() => {\n        toast({\n          title: message.title,\n          description: message.description,\n          status: message.status,\n          duration: message.duration,\n          isClosable: true,\n        })\n      }, [message,toast])\n    \n      const onSubmit = async(values, actions) => {\n        try {\n          const response = await axios.post('https://college-query.herokuapp.com/auth/login',\n          {\n              \"email\": values.email,\n              \"password\": values.password\n          })\n          const { accessToken, refreshToken } = response.data;\n          localStorage.set(\"accessToken\", accessToken);\n          localStorage.set(\"refreshToken\", refreshToken);\n          history.replace('/');\n          actions.setSubmitting(false)\n          } catch (error) {\n            setMessage({\n              status : \"error\",\n              title : \"invalid credentials\",\n              description: error.response.data.error.message,\n              duration: 5000\n            })\n          }\n      }\n    \n      \n        return (\n          <Flex height=\"100vh\" alignItems=\"center\" background=\"gray.100\" justifyContent=\"center\">\n            <Flex direction=\"column\" background=\"white\" p={12} rounded={6} shadow=\"2xl\">\n            <Heading mb={6}>Sign In</Heading>\n              <Formik\n                initialValues={initialValues}\n                validationSchema = {validationSchema}\n                onSubmit={ onSubmit }\n              >\n                {(props) => (\n                  <Form>\n                    \n                    <Field name=\"email\">\n                      {({ field, form }) => (\n                        <FormControl isInvalid={form.errors.email && form.touched.email}>\n                          <FormLabel htmlFor=\"email\">Email</FormLabel>\n                          <Input \n                            {...field} \n                            placeholder=\"Enter email\" \n                            id=\"email\" variant=\"outline\" \n                            type=\"email\"\n                          />\n                          <FormErrorMessage mb={3}>{form.errors.email}</FormErrorMessage>\n                        </FormControl>\n                      )}\n                    </Field>\n                    \n                    <Field name=\"password\">\n                      {({ field, form }) => (\n                        <FormControl isInvalid={form.errors.password && form.touched.password}>\n                          <FormLabel htmlFor=\"password\">Password</FormLabel>\n                          <InputGroup size=\"md\">\n                                <Input\n                                    {...field}\n                                    id=\"password\"\n                                    pr=\"4.5rem\"\n                                    type={show ? \"text\" : \"password\"}\n                                    placeholder=\"Enter password\"\n                                />\n                                <InputRightElement width=\"4.5rem\">\n                                    <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} >\n                                    {show ? \"Hide\" : \"Show\"}\n                                    </Button>\n                                </InputRightElement>\n                                </InputGroup>\n                          <FormErrorMessage width=\"300px\">{form.errors.password}</FormErrorMessage>\n                        </FormControl>\n                      )}\n                    </Field>\n    \n                    <Button\n                      mt={3}\n                      mb={3}\n                      colorScheme=\"blue\"\n                      isLoading={props.isSubmitting}\n                      type=\"submit\"\n                      width=\"300px\"\n                    >\n                      Log In\n                    </Button>\n                  </Form>\n                )}\n              </Formik>\n              <Text>\n                Dont have account..?\n                <Link as={ReachLink} color=\"teal.500\" to=\"/register\">\n                  Sign Up\n                </Link>\n              </Text>\n            </Flex>\n        </Flex>\n        )\n      }\n\nexport default LoginForm\n","import React from 'react'\nimport LoginForm from '../Components/LoginForm'\n\nfunction LoginPage() {\n    return (\n        <div>\n            <LoginForm/>\n        </div>\n    )\n}\n\nexport default LoginPage\n","import { Button } from '@chakra-ui/button'\nimport { FormControl } from '@chakra-ui/form-control'\nimport { FormErrorMessage, FormLabel } from '@chakra-ui/form-control'\nimport { Input, InputGroup, InputRightElement } from '@chakra-ui/input'\nimport { Link } from '@chakra-ui/layout'\nimport { Flex, Heading, Text } from '@chakra-ui/layout'\nimport { Field, Form, Formik } from 'formik'\nimport { useEffect, useState } from 'react'\nimport { Link as ReachLink} from 'react-router-dom'\nimport axios from 'axios'\nimport * as yup from 'yup';\nimport { useToast } from '@chakra-ui/toast'\n\nfunction RegisterForm() {\n    \n  const initialValues = {\n    name:'',\n    email:'',\n    password:''\n}\n\n    const validationSchema = yup.object({\n      name:yup\n      .string()\n      .required(\"Please enter your name\")\n      .min(3, \"Name must be at least 3 characters\")\n      .max(20, \"Name must be less than 20 characters\"),\n      email: yup\n      .string()\n      .email()\n      .required(\"Email is a required field\"),\n    password: yup\n      .string()\n      .required(\"Please enter your password\")\n      .matches(\n        /^.*(?=.{8,})((?=.*[!@#$%^&*()\\-_=+{};:,<.>]){1})(?=.*\\d)((?=.*[a-z]){1})((?=.*[A-Z]){1}).*$/,\n        \"Password must contain at least 8 characters, one uppercase, one number and one special case character\"\n      )\n  })\n\n  const [show, setShow] = useState(false)\n  const handleClick = () => setShow(!show)\n  const toast = useToast();\n  \n  const [message, setMessage] = useState({\n    status:\"info\",\n    title: \"Enter valid credentials\",\n    description:\"enter your correct name,valid email addres and strong password\",\n    duration:3000\n  })\n\n  useEffect(() => {\n    toast({\n      title: message.title,\n      description: message.description,\n      status: message.status,\n      duration: message.duration,\n      isClosable: true,\n    })\n  }, [message,toast])\n\n\n  const onSubmit = async(values, actions) => {\n    try {\n        const response = await axios.post('https://college-query.herokuapp.com/auth/verify-email',\n        {\n            \"name\": values.name,\n            \"email\": values.email,\n            \"password\": values.password\n        })\n        actions.setSubmitting(false);\n        setMessage({\n          status : \"success\",\n          title : response.data.message,\n          description: \"Please click on the link that has just been sent to your email account to verify your email and continue the registration process.\",\n          duration:10000\n        })\n        \n    } catch (error) {\n        setMessage({\n          status : \"error\",\n          title : \"Email not sent!\",\n          description: error.response.data.error.message,\n          duration: 5000\n        })\n    }\n  }\n\n\n    return (\n      <Flex height=\"100vh\" alignItems=\"center\" background=\"gray.100\" justifyContent=\"center\">\n        <Flex direction=\"column\" background=\"white\" p={12} rounded={6} shadow=\"2xl\">\n        <Heading mb={6}>Sign up</Heading>\n          <Formik\n            initialValues={initialValues}\n            validationSchema = {validationSchema}\n            onSubmit={ onSubmit }\n          >\n            {(props) => (\n              <Form>\n\n                <Field name=\"name\">\n                  {({ field, form }) => (\n                    <FormControl isInvalid={form.errors.name && form.touched.name}>\n                      <FormLabel htmlFor=\"name\">Name</FormLabel>\n                      <Input \n                        {...field}  \n                        id=\"name\" variant=\"outline\" \n                        type=\"text\"\n                        placeholder=\"Enter name\" \n                      />\n                      <FormErrorMessage mb={3}>{form.errors.name}</FormErrorMessage>\n                    </FormControl>\n                  )}\n                </Field>\n\n                <Field name=\"email\">\n                  {({ field, form }) => (\n                    <FormControl isInvalid={form.errors.email && form.touched.email}>\n                      <FormLabel htmlFor=\"email\">Email</FormLabel>\n                      <Input \n                        {...field}  \n                        id=\"email\" variant=\"outline\" \n                        type=\"email\"\n                        placeholder=\"Enter email\" \n                      />\n                      <FormErrorMessage mb={3}>{form.errors.email}</FormErrorMessage>\n                    </FormControl>\n                  )}\n                </Field>\n                \n                <Field name=\"password\">\n                  {({ field, form }) => (\n                    <FormControl isInvalid={form.errors.password && form.touched.password}>\n                      <FormLabel htmlFor=\"password\">Password</FormLabel>\n                      <InputGroup size=\"md\">\n                            <Input\n                                {...field}\n                                id=\"password\"\n                                pr=\"4.5rem\"\n                                type={show ? \"text\" : \"password\"}\n                                placeholder=\"Enter password\"\n                            />\n                            <InputRightElement width=\"4.5rem\">\n                                <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick} >\n                                {show ? \"Hide\" : \"Show\"}\n                                </Button>\n                            </InputRightElement>\n                            </InputGroup>\n                      <FormErrorMessage width=\"300px\">{form.errors.password}</FormErrorMessage>\n                    </FormControl>\n                  )}\n                </Field>\n\n                <Button\n                  mb={4}\n                  mt={3}\n                  width=\"300px\"\n                  colorScheme=\"blue\"\n                  isLoading={props.isSubmitting}\n                  type=\"submit\"\n                >\n                  Register\n                </Button>\n              </Form>\n            )}\n          </Formik>\n          <Text>\n            Already have account..?\n            <Link as={ReachLink} color=\"teal.500\" to=\"/login\">\n              Sign In\n            </Link>\n          </Text>\n        </Flex>\n    </Flex>\n    )\n  }\n\nexport default RegisterForm\n","import React from 'react'\nimport RegisterForm from '../Components/RegisterForm'\n\n\nfunction RegisterPage() {\n    return (\n        <div>\n            <RegisterForm/>\n        </div>\n    )\n}\n\nexport default RegisterPage\n","import { Button } from '@chakra-ui/button'\nimport { Heading } from '@chakra-ui/layout'\nimport axios from 'axios'\nimport React, { useEffect } from 'react'\nimport { Link, useHistory } from 'react-router-dom'\nimport localStorage from 'local-storage';\n\nfunction HomePage() {\n\n    const history = useHistory();\n\n    useEffect(() => {\n        requestLogin();\n    })\n    \n    const requestLogin = async ()=> {\n        try {\n            const accessToken = localStorage.get('accessToken');\n            const refreshToken = localStorage.get('refreshToken');\n            if(!accessToken || !refreshToken) \n            {\n                history.replace('/login');\n                return;\n            }\n            await axios.get('https://college-query.herokuapp.com',\n            { \n                headers: {\"Authorization\": `Bearer ${accessToken}`} \n            })\n        } catch (error) {\n            if(error.response.data.error.message === \"jwt expired\")\n            {\n                const refreshToken = localStorage.get('refreshToken');\n\n                    const response = await refreshTokens(refreshToken);\n                    if(!response)\n                    {\n                        localStorage.remove('accessToken');\n                        localStorage.remove('refreshToken');\n                        history.replace('/login');\n                        return;\n                    }else\n                    {\n                        requestLogin();\n                    }\n            }else{\n                localStorage.remove('accessToken');\n                localStorage.remove('refreshToken');\n                history.replace('/login');\n            }\n        }\n    }\n\n    const refreshTokens = async (refToken) => {\n        try {\n            const response = await axios.post('https://college-query.herokuapp.com/auth/refresh-token',\n            {\n                \"refreshToken\": refToken \n            })\n            const { accessToken, refreshToken } = response.data;\n            localStorage.set(\"accessToken\", accessToken);\n            localStorage.set(\"refreshToken\", refreshToken);\n            return response;\n        } catch (error) {\n            return;\n        }\n    }\n\n    return (\n        <div>\n            <Heading>this is page is under development</Heading>\n            <Link to=\"/logout\"><Button>logOut</Button></Link>\n        </div>\n    )\n}\n\nexport default HomePage\n","import { Heading } from '@chakra-ui/layout'\nimport React, { useEffect, useState } from 'react'\nimport { useHistory, useParams } from 'react-router-dom'\nimport axios from 'axios';\nimport { Button } from '@chakra-ui/button';\nimport { Alert } from '@chakra-ui/alert';\nimport { AlertIcon } from '@chakra-ui/alert';\nimport { Stack } from '@chakra-ui/layout';\nimport localStorage from 'local-storage';\n\nfunction EmailVerificationPage() {\n    const { emailVerificationToken } = useParams();\n    const history = useHistory();\n    const [message, setMessage] = useState('email verification is processing!');\n    const [status, setStatus] = useState('info');\n    \n\n    useEffect(() => {\n        axios.post('https://college-query.herokuapp.com/auth/register',\n        {\n            \"emailVerificationToken\": emailVerificationToken \n        })\n        .then((response)=>{\n            const { accessToken, refreshToken } = response.data;\n            localStorage.set(\"accessToken\", accessToken);\n            localStorage.set(\"refreshToken\", refreshToken);\n            setMessage('Account verified successfully. Continue!');\n            setStatus('success');\n            \n        })\n        .catch((error)=>{\n            setMessage(error.response.data.error.message);\n            setStatus('error')\n        })\n        \n    },[emailVerificationToken])\n    \n    return (\n        <Stack height=\"100vh\" alignItems=\"center\" background=\"gray.100\" justifyContent=\"center\">\n            <Heading></Heading>\n            <Alert status={status} width=\"400px\">\n                <AlertIcon />\n                {message}\n            </Alert>\n            \n            \n                <Button onClick={( ) => history.replace('/')} colorScheme=\"blue\">Home</Button>\n        </Stack>\n    )\n}\n\nexport default EmailVerificationPage\n","import { Heading } from '@chakra-ui/layout'\nimport React from 'react'\n\nfunction NotFoundPage() {\n    return (\n        <div>\n            <Heading>404 || NOT FOUND</Heading>\n        </div>\n    )\n}\n\nexport default NotFoundPage\n","import React, { useEffect } from 'react'\nimport localStorage from 'local-storage';\nimport { useHistory } from 'react-router';\nimport { Heading } from '@chakra-ui/layout';\nimport axios from 'axios';\n\nfunction LogoutPage() {\n    const histroy = useHistory();\n    const logout = async () => {\n        try {\n            const refreshToken = localStorage.get('refreshToken');\n            await axios.delete('https://college-query.herokuapp.com/auth/logout',\n            {\n                \"refreshToken\": refreshToken\n            })\n            localStorage.remove('accessToken');\n            localStorage.remove('refreshToken');\n            histroy.replace('/login');\n        } catch (error) {\n            localStorage.remove('accessToken');\n            localStorage.remove('refreshToken');\n            histroy.replace('/login');\n        }\n\n    }\n\n    useEffect(() => {\n        logout();\n    })\n\n    return (\n        <div>\n            <Heading> LogoutPage </Heading>\n        </div>\n    )\n}\n\nexport default LogoutPage\n","import LoginPage from \"./Pages/LoginPage\";\nimport RegisterPage from \"./Pages/RegisterPage\";\nimport { BrowserRouter, Switch, Route} from 'react-router-dom'\nimport HomePage from \"./Pages/HomePage\";\nimport EmailVerificationPage from \"./Pages/EmailVerificationPage\";\nimport NotFoundPage from \"./Pages/NotFoundPage\";\nimport LogoutPage from \"./Pages/LogoutPage\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n       <Switch>\n         <Route exact path=\"/\" component={HomePage}/>\n         <Route path=\"/login\" component={LoginPage}/>\n         <Route path=\"/register\" component={RegisterPage}/>\n         <Route path=\"/logout\" component={LogoutPage}/>\n         <Route path=\"/verify-mail/:emailVerificationToken\" component={EmailVerificationPage}/>\n         <Route path=\"*\" component={NotFoundPage}/>\n       </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}